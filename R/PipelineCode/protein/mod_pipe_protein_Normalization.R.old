#' pipe_prot_norm UI Function
#'
#' @description A shiny Module.
#'
#' @param id,input,output,session Internal parameters for {shiny}.
#'
#' @noRd
#'
#' @importFrom shiny NS tagList
#' @importFrom DAPAR2 normalizeMethods.dapar normalizeD
#'
mod_pipe_protein_Normalization_ui <- function(id){
  ns <- NS(id)
  tagList(
    mod_navigation_ui(ns('nav_pipe_prot_norm'))
  )
}

#' pipe_prot_norm Server Function
#'
#' @noRd
#'
#' @param input,output,session
#'
#' @param obj xxx
#'
#' @param samplesTab xxx
#'
#' @param ind xxx
#'
#' @importFrom DAPAR2 normalizeD compareNormalizationD_HC
#' @import QFeatures
#'
mod_pipe_protein_Normalization_server <- function(input, output, session, obj, indice){
  ns <- session$ns





  observeEvent(req(r.nav$reset),{
    ## update widgets whose names are in r.widgets with the value in this list
    ## This part must be before the reinitialization of r.nav$isDone
    # updateCheckboxInput(session,'selectIdent', value=NULL)
    # updateSelectInput(session,'convert_proteinId', selected=NULL)
    # updateSelectInput(session,'idBox', selected=NULL)
    # updateRadioButtons(session, "typeOfData", selected=NULL)
    # updateRadioButtons(session, "checkDataLogged", selected=NULL)
    # updateCheckboxInput(session,"replaceAllZeros", value=NULL)


    rv.norm$widgets$method <- "None"
    rv.norm$widgets$type <- "None"
    rv.norm$widgets$varReduction <- FALSE
    rv.norm$widgets$quantile <- 0.15
    rv.norm$widgets$spanLOESS <- 0.7
    rv.norm$resetTracking <- TRUE

    rv.norm$sync <- FALSE

    rv.norm$dataIn <- obj()
    rv.norm$i <- indice()

    ## do not modify this part
    r.nav$isDone <- rep(FALSE, 2)
    r.nav$reset <- FALSE
    ## end of no modifiable part
  })






  ##
  ## Definitions of the screens
  ##

  ###---------------------------------------------------------------------------------###
  ###                                 Screen 1                                        ###
  ###---------------------------------------------------------------------------------###





  #######################

  #viewComparisonNorm2 <- reactive({
  #  rv$PlotParams$paletteConditions
  #  leg <- NULL
  #  grp <- NULL
  #
  #  labelsNorm <- NULL
  #  labelsToShowNorm <- NULL
  #  gToColorNorm <- NULL
  #
  #  labelsToShowNorm <- c(1:nrow(Biobase::pData(rv$current.obj)))
  #
  #
  #
  #  if (is.null(rv$whichGroup2Color)
  #      || (rv$whichGroup2Color == "Condition")){
  #    labelsNorm <- Biobase::pData(rv$current.obj)[,"Condition"]
  #  }else {
  #    labelsNorm <- paste(Biobase::pData(rv$current.obj)[,"Condition"],
  #                        Biobase::pData(rv$current.obj)[,"Bio.Rep"],
  #                        Biobase::pData(rv$current.obj)[,"Tech.Rep"],
  #                        Biobase::pData(rv$current.obj)[,"Analyt.Rep"],
  #                        sep= "_")
  #  }
  #
  #
  #  if (input$datasets == paste0("Normalized.", rv$typeOfDataset)){
  #    obj1 <- rv$dataset[[(which(names(rv$dataset)==dname) - 1)]]
  #    obj2 <- rv$dataset[[input$datasets]]
  #  }
  #  else {
  #    obj1 <-rv$dataset[[input$datasets]]
  #    obj2 <- rv$current.obj
  #
  #  }
  #
  #  wrapper.compareNormalizationD(obj1, obj2,
  #                                labelsNorm,
  #                                as.numeric(labelsToShowNorm),
  #                                palette = rv$PlotParams$paletteConditions)
  #
  #})






  ###---------------------------------------------------------------------------------###
  ###                                 Screen 2                                        ###
  ###---------------------------------------------------------------------------------###

  output$Screen_Prot_norm_2 <- renderUI({
    print('screen 2')


  })



  ##' -- Validate and save the normalization ---------------------------------------
  ##' @author Samuel Wieczorek


  return({reactive(rv.norm$dataOut)})

}

## To be copied in the UI
# mod_pipe_protein_Normalization_ui("pipe_prot_norm_ui_1")

## To be copied in the server
# callModule(mod_pipe_protein_Normalization_server, "pipe_prot_norm_ui_1")

